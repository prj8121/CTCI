initial thoughts
iterate through, on each different character iterate forward until a new diferent character 
    build result string as you go
        building string as you go is rough, since we copy the string each time
        is there a way to know the length of the final result without making the whole thing?
        we could allocate space equal to the length of the original and then
            just know that if we go over to return the original
        we'd have to handle the case where we don't take up the whole string by returning a slice



for the resulting string to be longer than the original the average of the character counts has to be > 2

aabbccd     : a2b2c2d1      average = 1.75
aabbccdd    : a2b2c2d2      average = 2
aaabbccd    : a3b2c2d1      average = 2
aaabbccdd   : a3b2c2d2      average = 2.25

(This is not a proof but an illustration)

so maybe as we go we total the character counts and divide by the number of characters at the end 
(notably not the actual number of unique characters but the number of segments of matching characters)


idea :
    iterate through, track current char and number of times we found it in a row, 
        when new char found write into results, when length of results >= length original return original

        else return result

        can do this inplace since we know the maximum length of result

        should be O(n) since we iterate through once
        